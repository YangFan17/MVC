MVC控制器负责响应对ASP.NET MVC网站发起的请求。每一个浏览器请求都映射到了一个专门的控制器。
控制器动作返回一种叫做动作结果（Action Result）的东西。动作结果是控制器动作返回给浏览器请求的东西。
1.ViewResult – 代表HTML及标记。
2.EmptyResult – 代表无结果。
3.RedirectResult – 代表重定向到一个新的URL。
4.RedirectToRouteResult – 代表重定向到一个新的控制器动作。
5.JsonResult – 代表一个JSON（Javascript Object Notation）结果，它可以用于AJAX应用程序。
6.ContentResult – 代表着文本结果。

正则表达式\d+匹配一个或多个整数

ViewData属性，将数据从控制器传递给视图。
 HTML Helper方法将例如“<”和“>”这样的特殊字符编码为在web页面中能够安全显示的字符。eg:&lt;&lt;Hello World&gt;&gt;
 在一个ASP.NET MVC应用程序中，一个URL与一个控制器的动作相对应，而不是磁盘上的页面。你键入到浏览器地址栏的URL与你应用程序中的文件之间并没有一个对应关系。
 一个ASP.NET Web窗体应用程序是以内容为中心的。而一个ASP.NET MVC应用程序则以是应用程序逻辑为中心的。
 一个浏览器请求通过名叫URL路由（URL Routing）的ASP.NET MVC功能被映射到了一个控制器动作。URL路由将即将到来的请求发送到了控制器动作。
 M：模型应该包含你的应用程序中的所有业务逻辑和数据库访问逻辑。
 视图应该仅包含与生成用户界面有关的逻辑。控制器应该仅仅只包含最少量的逻辑，用于返回正确的视图或者将用户重定向到另一个动作。任何其他的事情都应该包含在模型中
 应该竭尽全力创建一个丰富的模型以及一个瘦小的控制器。你的控制器方法应该只包含几行代码。
 DbSet数据集是指数据库中可以查询的实体的集合。当执行Linq 查询时，Dbset对象能够将查询内部转换，并触发数据库。
 
Form标签中方法属性？
方法属性决定了请求类型。有四种请求类型：get，post，put以及delete.
Get： 当需要获取数据时使用。
Post： 当需要新建一些事物时使用。
Put: 当需要更新数据时使用。
Delete：需要删除数据时使用。

分部视图，从逻辑上看是一种可重用的视图，不会直接显示，包含于其他视图中，作为其视图的一部分来显示。
临时Cookie会在浏览器关闭时自动删除，永久Cookie不会被删除。可通过浏览器设置或是编写代码手动删除。